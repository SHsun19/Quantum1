import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
import qiskit
from qiskit import QuantumCircuit, transpile, Aer
from qiskit.opflow import PauliSumOp
from qiskit_machine_learning.neural_networks import TwoLayerQNN, CircuitQNN
from qiskit.circuit.library import ZZFeatureMap
from qiskit.utils import QuantumInstance, algorithm_globals
from qiskit.algorithms.optimizers import COBYLA, SPSA
from qiskit_machine_learning.algorithms.classifiers import NeuralNetworkClassifier
import tensorflow as tf
import time
from IPython.display import clear_output, display

# Load the iris dataset
data = load_iris(as_frame=False)
X_data_temp = data.data
Y_data_temp = data.target

# Preprocess the dataset
X_data_temp = StandardScaler().fit_transform(X_data_temp)

features = X_data_temp.shape[1]
num_qubits = features
algorithm_globals.random_seed = 42

# Create feature map and variational circuit
feature_map = ZZFeatureMap(feature_dimension=features, reps=1, entanglement="full")
reps = 2
variational_circ = QuantumCircuit(num_qubits)
for _ in range(reps):
    variational_circ.h(range(num_qubits))
    variational_circ.barrier()
    for i in range(num_qubits):
        variational_circ.crz(np.pi, i, (i + 1) % num_qubits)
        variational_circ.barrier()
variational_circ.draw('mpl')

backend = Aer.get_backend('statevector_simulator')

# Specify the observable
observable = PauliSumOp.from_list([("ZZ" * num_qubits, 1)])

quantum_instance = QuantumInstance(backend,
                                   shots=1024,
                                   seed_simulator=algorithm_globals.random_seed,
                                   seed_transpiler=algorithm_globals.random_seed)

two_layers = False
if two_layers:
    qnn_architecture = TwoLayerQNN(
        num_qubits,
        feature_map=feature_map,
        ansatz=variational_circ,
        observable=observable,
        quantum_instance=quantum_instance
    )
else:
    num_inputs = features
    qc = QuantumCircuit(num_inputs)
    qc.append(feature_map, range(num_inputs))
    qc.append(variational_circ, range(num_inputs))
    qc.decompose().draw(output="mpl")

    def parity(x):
        return "{:b}".format(x).count("1") % 2

    output_shape = len(np.unique(Y_data_temp))

    qnn_architecture = CircuitQNN(
        circuit=qc,
        input_params=feature_map.parameters,
        weight_params=variational_circ.parameters,
        interpret=parity,
        output_shape=output_shape,
        quantum_instance=quantum_instance,
    )

X_train, X_test, y_train, y_test = train_test_split(X_data_temp, Y_data_temp, test_size=0.2,
                                                    random_state=algorithm_globals.random_seed)



max_iter = 1000  # Define max_iter variable separately
optimizer = COBYLA(maxiter=max_iter)

def callback_graph(weights, obj_func_eval):
    objective_func_vals.append(obj_func_eval)
    plt.clf()
    plt.title("Objective function value against iteration")
    plt.xlabel("Iteration")
    plt.ylabel("Objective function value")
    plt.plot(range(len(objective_func_vals)), objective_func_vals, '-o')
    display(plt.gcf())
    clear_output(wait=True)

qnnc = NeuralNetworkClassifier(qnn_architecture, optimizer=optimizer, callback=callback_graph)

start = time.time()

plt.rcParams['figure.figsize'] = [10, 7]
objective_func_vals = []

y_train_fit = y_train.reshape(-1)
qnnc.fit(X_train, y_train_fit)

elapsed = time.time() - start
print("Time elapsed: ", elapsed)

plt.show()

from sklearn.metrics import accuracy_score

y_pred = qnnc.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("모델 정확도: {:.2f}%".format(accuracy * 100))

cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix:')
print(cm)

print('Classification report:')
print(classification_report(y_test, y_pred))

